<!-- //Register.js
const addMember = () => {
    Axios.post('http://localhost:3001/register', {
        memberID: memberID, password: password, nameKanji: nameKanji, nameKana: nameKana, birthday: birthday, gender: gender, email: email, phone: phone, postCode: postCode, address: address, regID: regID
    }).then((response) => {
        switch (response.data.message) {
            case 'inserted':
                alert('登録完了')
                navigate('/manager')
                break
            case 'dup id':
                alert('IDが重複しています。')
                handleClose()
                break
            case 'dup email':
                alert('メールアドレスが重複しています。')
                handleClose()
                break
            case 'dup phone':
                alert('電話番号が重複しています。')
                handleClose()
                break
            default:
                handleClose()
                alert('DBエラー。担当者にお問い合わせください。', response.data.error)
        }
    })
}


<Form.Group className="mt-4 mb-3">
    <Form.Label className="fw-bold">名前（漢字）</Form.Label>
    <Form.Control autoFocus type="text"  {...register('nameKanji')} placeholder="図書タロウ" onChange={(event) => { setNameKanji(event.target.value) }} />
    <span className="errors">{errors?.nameKanji?.message}</span>
</Form.Group>


//Edit.js
const getMember = () => {
        Axios.get('http://localhost:3001/get', { params: { getMemberID: getMemberID } }).then((response) => {
            if (response.data.length === 0) {
                alert('会員情報呼び出しエラー。')
                navigate('/manager')
            } else if (response.data.error) {
                alert('会員情報呼び出しエラー。')
                navigate('/manager')
            } else {
                const r = response.data[0]
                setMemberID(getMemberID)
                setPassword(r.password)
                setNameKanji(r.nameKanji)
                setNameKana(r.nameKana)
                setBirthday(getYmd(r.birthday))
                setGender(r.gender)
                setEmail(r.email)
                setPhone(r.phone)
                setPostCode(r.postCode)
                setAddress(r.address)
                reset()
            }
        })
    }


    const updMember = () => {
        Axios.put('http://localhost:3001/update', {
            nameKanji: nameKanji, nameKana: nameKana, birthday: birthday, gender: gender, email: email, phone: phone, postCode: postCode, address: address, updID: updID, getMemberID: getMemberID
        }).then((response) => {
            switch (response.data.message) {
                case 'updated':
                    alert('修正完了')
                    navigate('/manager')
                    break
                case 'dup email':
                    alert('メールアドレスが重複しています。')
                    handleClose()
                    break
                case 'dup phone':
                    alert('電話番号が重複しています。')
                    handleClose()
                    break
                default:
                    alert('DBエラー。担当者にお問い合わせください。', response.data.error)
            }
        })
    }

//Both
const genderText = () => { return (gender === 'm') ? '男性' : '女性' }


//index.js
app.post('/register', (req, res) => {
    const memberID = req.body.memberID
    const password = req.body.password
    const nameKanji = req.body.nameKanji
    const nameKana = req.body.nameKana
    const birthday = req.body.birthday
    const gender = req.body.gender
    const email = req.body.email
    const phone = req.body.phone
    const postCode = req.body.postCode
    const address = req.body.address
    const regID = req.body.regID

    db.query('INSERT INTO members (memberID, password, nameKanji, nameKana, birthday, gender, email, phone, postCode, address, regID, regDate) VALUES (?,?,?,?,?,?,?,?,?,?,?,now())', [memberID, password, nameKanji, nameKana, birthday, gender, email, phone, postCode, address, regID], (err, result) => {
        if (err) {
            console.log(err)
            console.log("Values Not Inserted")
            if (err.sqlMessage.includes('PRIMARY')) {
                res.send({ message: 'dup id' })
            } else if (err.sqlMessage.includes('email_UNIQUE')) {
                res.send({ message: 'dup email' })
            } else if (err.sqlMessage.includes('phone_UNIQUE')) {
                res.send({ message: 'dup phone' })
            } else {
                res.send(err)
            }
        } else {
            console.log("Values Inserted")
            res.send({ message: 'inserted' })
        }
    })
})


app.get('/get', (req, res) => {
    const { getMemberID } = req.query
    db.query(`SELECT * FROM members WHERE memberID = ${getMemberID}`, (err, result) => {
        res.send(result)
    })
})


app.put('/update', (req, res) => {
    const updID = req.body.updID
    const getMemberID = req.body.getMemberID
    const nameKanji = req.body.nameKanji
    const nameKana = req.body.nameKana
    const birthday = req.body.birthday
    const gender = req.body.gender
    const email = req.body.email
    const phone = req.body.phone
    const postCode = req.body.postCode
    const address = req.body.address

    db.query('UPDATE members SET nameKanji = ?, nameKana = ?, birthday = ?, gender = ?, email = ?, phone = ?, postCode = ?, address = ?, updID = ?, updDate = now() WHERE memberID = ?', [nameKanji, nameKana, birthday, gender, email, phone, postCode, address, updID, getMemberID], (err, result) => {
        if (err) {
            console.log(err)
            console.log("Values Not Updated")
            if (err.sqlMessage.includes('email_UNIQUE')) {
                res.send({ message: 'dup email' })
            } else if (err.sqlMessage.includes('phone_UNIQUE')) {
                res.send({ message: 'dup phone' })
            } else {
                res.send(err)
            }
        } else {
            console.log("Values Updated")
            res.send({ message: 'updated' })
        }
    })
}) -->
